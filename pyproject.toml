[build-system]
requires = [
  "setuptools>=62.1",
  "setuptools_scm[toml]>=6.2",
  "wheel",]
build-backend = "setuptools.build_meta"

[project]
name = "quantity"
description = "Add units to any array-api compatible class"
requires-python = ">=3.11"
readme = { file = "README.rst", content-type = "text/x-rst" }
license = { file = "licenses/LICENSE.rst" }
authors = [
    { name = "The Astropy Developers", email = "astropy.team@gmail.com" }
]
dependencies = []
dynamic = ["version"]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-doctestplus",
    "pytest-cov"
]
docs = [
    "sphinx",
    "sphinx-automodapi",
]
[project.urls]
repository = "https://github.com/astropy/quantity-2.0"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["quantity._dev*"]

[tool.setuptools_scm]
write_to = "quantity/_version.py"

[tool.pytest.ini_options]
testpaths = [
  "quantity",
  "docs",
]
norecursedirs = [
    "docs[\\/]_build",
    "docs[\\/]generated",
    "quantity[\\/]_dev",
]
doctest_plus = "enabled"
text_file_format = "rst"
addopts = "--doctest-rst"

[tool.coverage.run]
omit = [
 "quantity/__init*",
 "quantity/conftest.py",
 "quantity/*setup_package*",
 "quantity/tests/*",
 "quantity/*/tests/*",
 "quantity/extern/*",
 "quantity/version*",
 "*/quantity/__init*",
 "*/quantity/conftest.py",
 "*/quantity/*setup_package*",
 "*/quantity/tests/*",
 "*/quantity/*/tests/*",
 "*/quantity/extern/*",
 "*/quantity/version*",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about packages we have installed
  "except ImportError",
  # Don't complain if tests don't hit assertions
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain about script hooks
  "def main(.*):",
  # Ignore branches that don't pertain to this version of Python
  "pragma: py{ignore_python_version}",
  # Don't complain about IPython completion helper
  "def _ipython_key_completions_",
  # typing.TYPE_CHECKING is False at runtime
  "if TYPE_CHECKING:",
  # Ignore typing overloads
  "@overload",
]

[tool.ruff]
exclude=[  # package template provided files.
    "setup.py",
    "quantity/version.py",
    "quantity/_dev/*",
    "docs/conf.py",
]

[tool.ruff.lint]
extend-select = [
  "ARG",      # flake8-unused-arguments
  "B",        # flake8-bugbear
  "C4",       # flake8-comprehensions
  "E",        # errors
  "G",        # flake8-logging-format
  "I",        # isort
  "ICN",      # flake8-import-conventions
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
]
ignore = [
  "ISC001",   # Conflicts with formatter
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "RET505",   # Unnecessary `else`/`elif` after `return` statement
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["quantity_2_0._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
